// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A ProlificLabs take-home challenge. https://github.com/ProlificLabs/shakesearch.",
    "title": "shakesearch",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "shakesearch.micahparks.com",
  "basePath": "/",
  "paths": {
    "/api/alive": {
      "get": {
        "description": "Any non-200 response means the service is not alive.",
        "tags": [
          "system"
        ],
        "summary": "Used by Caddy or other reverse proxy to determine if the service is alive.",
        "operationId": "alive",
        "responses": {
          "200": {
            "description": "Service is alive."
          }
        }
      }
    },
    "/api/search": {
      "get": {
        "description": "The string will be used in conjunction with [this project](https://github.com/sahilm/fuzzy) to perform a fuzzy search on Shakespeare's works.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "public"
        ],
        "summary": "Fuzzy search for a string of text in Shakespeare's works.",
        "operationId": "shakeSearch",
        "parameters": [
          {
            "type": "string",
            "description": "The search query.",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 20,
            "description": "The maximum number of results to return.",
            "name": "maxResults",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A sorted array of results that are lines that match the given query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Result"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/works": {
      "get": {
        "description": "The given line number of Shakespeare's complete works will be surrounded by its lines in the complete works up to maxLines. It will be returned as an HTML document.",
        "produces": [
          "text/html"
        ],
        "tags": [
          "public"
        ],
        "summary": "Retrieve an HTML document that contains a snippet of Shakespeare's complete works centered around a line number.",
        "operationId": "shakeWorks",
        "parameters": [
          {
            "type": "integer",
            "description": "The line number to fetch \u0026 focus.",
            "name": "line",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "The maximum number of lines to return. Half before, half after.",
            "name": "maxLines",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The HTML document containing a snippet of Shakespeare's complete works.",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Result": {
      "properties": {
        "line": {
          "description": "The line with a match to the search query.",
          "type": "string"
        },
        "lineNumbers": {
          "description": "The line numbers in the text file this line is found on.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "matchedIndexes": {
          "description": "The indexes in the line that matched the query.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "Endpoints that are publicly accessible.",
      "name": "public"
    },
    {
      "description": "Endpoints required by the system that are not public facing.",
      "name": "system"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A ProlificLabs take-home challenge. https://github.com/ProlificLabs/shakesearch.",
    "title": "shakesearch",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.0.1"
  },
  "host": "shakesearch.micahparks.com",
  "basePath": "/",
  "paths": {
    "/api/alive": {
      "get": {
        "description": "Any non-200 response means the service is not alive.",
        "tags": [
          "system"
        ],
        "summary": "Used by Caddy or other reverse proxy to determine if the service is alive.",
        "operationId": "alive",
        "responses": {
          "200": {
            "description": "Service is alive."
          }
        }
      }
    },
    "/api/search": {
      "get": {
        "description": "The string will be used in conjunction with [this project](https://github.com/sahilm/fuzzy) to perform a fuzzy search on Shakespeare's works.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "public"
        ],
        "summary": "Fuzzy search for a string of text in Shakespeare's works.",
        "operationId": "shakeSearch",
        "parameters": [
          {
            "type": "string",
            "description": "The search query.",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 20,
            "description": "The maximum number of results to return.",
            "name": "maxResults",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A sorted array of results that are lines that match the given query.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Result"
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/api/works": {
      "get": {
        "description": "The given line number of Shakespeare's complete works will be surrounded by its lines in the complete works up to maxLines. It will be returned as an HTML document.",
        "produces": [
          "text/html"
        ],
        "tags": [
          "public"
        ],
        "summary": "Retrieve an HTML document that contains a snippet of Shakespeare's complete works centered around a line number.",
        "operationId": "shakeWorks",
        "parameters": [
          {
            "type": "integer",
            "description": "The line number to fetch \u0026 focus.",
            "name": "line",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "The maximum number of lines to return. Half before, half after.",
            "name": "maxLines",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The HTML document containing a snippet of Shakespeare's complete works.",
            "schema": {
              "type": "file"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Result": {
      "properties": {
        "line": {
          "description": "The line with a match to the search query.",
          "type": "string"
        },
        "lineNumbers": {
          "description": "The line numbers in the text file this line is found on.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "matchedIndexes": {
          "description": "The indexes in the line that matched the query.",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    }
  },
  "tags": [
    {
      "description": "Endpoints that are publicly accessible.",
      "name": "public"
    },
    {
      "description": "Endpoints required by the system that are not public facing.",
      "name": "system"
    }
  ]
}`))
}
